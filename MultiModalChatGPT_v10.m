function MultiModalChatGPT_v10
close all force hidden;
clc;
evalin('base', 'clear;');

% Create main figure
fig = uifigure('Name', 'CheapGPT', 'Position', [100 100 1000 700]);
movegui(fig, 'center');

% Initialize chat history and file data in UserData
fig.UserData.chatHistory = {};
fig.UserData.currentFiles = {};

% Create chat history display
historyBox = uitextarea(fig,...
    'Position', [20 180 960 500],...
    'Editable', false,...
    'WordWrap', true,...
    'FontSize', 12,...
    'BackgroundColor', [1 1 1]);

% Create file upload panel
filePanel = uipanel(fig, 'Title', 'File Upload',...
    'Position', [20 35 400 140],...
    'BackgroundColor', [0.95 0.95 0.95]);

% File upload components
uibutton(filePanel, 'push',...
    'Text', 'Browse Files',...
    'Position', [10 80 100 30],...
    'ButtonPushedFcn', @(btn,event) browseFiles);

fig.UserData.fileList = uilistbox(filePanel,...
    'Position', [120 10 270 100],...
    'Multiselect', 'on');

% Create input panel
inputPanel = uipanel(fig, 'Title', 'Chat Input',...
    'Position', [430 35 550 140],...
    'BackgroundColor', [0.95 0.95 0.95]);

% Create input field
inputField = uieditfield(inputPanel, 'text',...
    'Position', [10 10 400 100],...
    'Placeholder', 'Type your message here...',...
    'FontSize', 12);

% Create buttons and busy label
sendBtn = uibutton(inputPanel, 'push',...
    'Text', 'Send',...
    'Position', [420 70 115 40],...
    'FontSize', 14,...
    'BackgroundColor', [0.3 0.6 1],...
    'FontColor', [1 1 1],...
    'ButtonPushedFcn', @(btn,event) sendMessage);

busyLabel = uilabel(inputPanel, ...
    'Text', '', ...
    'Position', [420 50 115 20], ...
    'FontSize', 12, ...
    'HorizontalAlignment', 'center', ...
    'Visible', 'off', ...
    'FontColor', 'r'); % Set text color to red

uibutton(inputPanel, 'push',...
    'Text', 'New Chat',...
    'Position', [440 10 70 20],...
    'FontSize', 12,...
    'BackgroundColor', [0.4 0.8 0.4],...
    'FontColor', [1 1 1],...
    'ButtonPushedFcn', @(btn,event) handleNewChat);


uibutton(fig, 'push',...
    'Text', 'Settings',...
    'Position', [880 670 100 25],...
    'FontSize', 12,...
    'BackgroundColor', [0.8 0.8 0.8],...
    'ButtonPushedFcn', @(btn,event) OpenAISettings());

% Callback functions
    function browseFiles
        [files, path] = uigetfile(...
            {'*.png;*.jpg;*.jpeg;*.pdf;*.docx;*.txt',...
            'Supported Files (*.png, *.jpg, *.pdf, *.docx,*.txt)'},...
            'MultiSelect', 'on');

        if ~isequal(files, 0)
            if ischar(files)
                files = {files};
            end
            fullpaths = fullfile(path, files);
            fig.UserData.currentFiles = fullpaths;
            fig.UserData.fileList.Items = cellstr(files);
        end
    end

    function sendMessage
        % Disable controls and show busy state
        sendBtn.Enable = 'off';
        busyLabel.Text = 'Busy...';
        busyLabel.Visible = 'on';
        drawnow;
        
        prompt = inputField.Value;
        files = fig.UserData.currentFiles;

        if isempty(prompt) && isempty(files)
            sendBtn.Enable = 'on';
            busyLabel.Visible = 'off';
            return;
        end

        % Update GUI
        if ~isempty(prompt)
            updateHistory('user', prompt);
        end
        if ~isempty(files)
            for i = 1:length(files)
                updateHistory('system', ['Uploaded file: ' files{i}]);
            end
        end

        inputField.Value = '';
        fig.UserData.currentFiles = {};
        fig.UserData.fileList.Items = {};

        % Force UI update before processing
        drawnow;

        try
            processRequest(prompt, files);
        catch ME
            updateHistory('system', ['Error: ' ME.message]);
        end

        % Re-enable controls
        sendBtn.Enable = 'on';
        busyLabel.Visible = 'off';
        drawnow;
    end

    function handleNewChat
        fig.UserData.chatHistory = {};
        fig.UserData.currentFiles = {};
        historyBox.Value = '';
        fig.UserData.fileList.Items = {};
        updateHistory('system', 'New chat session started');
    end

    function updateHistory(role, content)
        currentText = historyBox.Value;
        if isempty(currentText)
            currentText = {};
        elseif ischar(currentText)
            currentText = {currentText};
        end

        switch role
            case 'user'
                newEntries = {['You: ' content]};
            case 'assistant'
                separator = repmat('-', 1, 40);
                newEntries = {separator, ['Assistant: ' content], separator};
            case 'system'
                newEntries = {['System: ' content]};
        end

        historyBox.Value = [currentText; newEntries(:)];
        scroll(historyBox, 'bottom');
    end
    function processRequest(prompt, files)
        chatHistory = fig.UserData.chatHistory;

        % --- Load Settings ---
        if ispref('MultiModalChatGPT', 'Settings')
            settings = getpref('MultiModalChatGPT', 'Settings');
        else
            error('Settings not configured. Click the Settings button to configure.');
        end
        apiKey = settings.apiKey;

        % --- Initialize Messages with System Prompt ---
        messagesForAPI = {};
        systemMessage = struct(...
            'role', 'system',...
            'content', {{struct('type', 'text', 'text', settings.systemPrompt)}});
        messagesForAPI = [messagesForAPI; {systemMessage}];

        % --- Include Chat History ---
        if ~isempty(chatHistory)
            messagesForAPI = [messagesForAPI; chatHistory];
        end

        % --- Process Files & Build Current User Message ---
        contentArray = {};
        userMessage = [];

        if ~isempty(files)
            for i = 1:length(files)
                [~, ~, ext] = fileparts(files{i});
                ext = lower(ext);
                try
                    if ismember(ext, {'.png', '.jpg', '.jpeg'})
                        base64Image = encode_image(files{i});
                        contentArray{end+1} = struct(...
                            'type', 'image_url',...
                            'image_url', struct('url', ['data:image/jpeg;base64,' base64Image]));
                    else
                        textContent = extractDocumentText(files{i});
                        contentArray{end+1} = struct(...
                            'type', 'text',...
                            'text', ['File content: ' textContent]);
                    end
                catch ME
                    contentArray{end+1} = struct(...
                        'type', 'text',...
                        'text', ['Error processing file: ' ME.message]);
                end
            end
        end

        % --- Add Text Prompt ---
        if ~isempty(prompt)
            contentArray{end+1} = struct('type', 'text', 'text', prompt);
        end

        % --- Build User Message ---
        if ~isempty(contentArray)
            userMessage = struct(...
                'role', 'user',...
                'content', {contentArray});
            messagesForAPI = [messagesForAPI; {userMessage}];
        end

        % --- API Request ---
        try
            requestData = struct(...
                'model', settings.model,...
                'messages', {messagesForAPI},...
                'temperature', settings.temperature,...
                'top_p', settings.topP,...
                'max_tokens', settings.maxTokens,...
                'frequency_penalty', settings.frequencyPenalty,...
                'presence_penalty', settings.presencePenalty);

            options = weboptions(...
                'HeaderFields', {...
                'Authorization', ['Bearer ' apiKey];...
                'Content-Type', 'application/json'},...
                'RequestMethod', 'POST',...
                'Timeout', 30);

            response = webwrite('https://api.openai.com/v1/chat/completions', requestData, options);

            % --- Handle Response ---
            if isfield(response, 'choices') && ~isempty(response.choices)
                answer = response.choices(1).message.content;
                assistantMessage = struct(...
                    'role', 'assistant',...
                    'content', {{struct('type', 'text', 'text', answer)}});
                
                if ~isempty(userMessage)
                    fig.UserData.chatHistory = [fig.UserData.chatHistory; {userMessage}];
                end
                fig.UserData.chatHistory = [fig.UserData.chatHistory; {assistantMessage}];
                
                updateHistory('assistant', answer);
            else
                updateHistory('system', 'Error: No response from API.');
            end
        catch ME
            updateHistory('system', ['API Error: ' ME.message]);
        end
    end

    function base64Image = encode_image(image_path)
        fid = fopen(image_path, 'rb');
        imageData = fread(fid, inf, '*uint8');
        fclose(fid);
        base64Image = matlab.net.base64encode(imageData);
        base64Image = strrep(base64Image, newline, '');
    end

    function textContent = extractDocumentText(filePath)
        [~, ~, ext] = fileparts(filePath);
        textContent = 'Unsupported document format';
        try
            if strcmpi(ext, '.pdf')
                textContent = extractFileText(filePath);
                textContent = char(textContent);
            elseif strcmpi(ext, '.txt')
                textContent = extractFileText(filePath);
                textContent = char(textContent);
            elseif strcmpi(ext, '.docx')
                textContent = extractDocxText(filePath);
            end
        catch ME
            textContent = ['Error: ' ME.message];
        end
    end

    function text = extractDocxText(docxPath)
        tmpDir = tempname;
        mkdir(tmpDir);
        try
            unzip(docxPath, tmpDir);
            xmlPath = fullfile(tmpDir, 'word', 'document.xml');
            xmlText = fileread(xmlPath);
            tokens = regexp(xmlText, '<w:t[^>]*>([^<]*)</w:t>', 'tokens');
            text = strjoin([tokens{:}], ' ');
            rmdir(tmpDir, 's');
        catch ME
            text = ['DOCX Error: ' ME.message];
            try
                rmdir(tmpDir, 's');
            catch
            end
        end
    end
end

function OpenAISettings()

    existingFigs = findall(0, 'Type', 'Figure', 'Name', 'OpenAI Settings');
    if ~isempty(existingFigs)
        close(existingFigs);
    end
    % Create settings figure with reduced height
    settingsFig = uifigure('Name', 'OpenAI Settings', 'Position', [100 100 600 500], 'Color', [0.95 0.95 0.95]);
    movegui(settingsFig, 'center');

    % Initialize controls structure
    settingsControls = struct();

    % Default settings
    defaultSettings = struct(...
        'apiKey', '',...
        'systemPrompt', 'You are a helpful assistant.',...
        'model', 'gpt-4o-mini',...
        'temperature', 0.5,...
        'maxTokens', 100,...
        'topP', 1,...
        'frequencyPenalty', 0,...
        'presencePenalty', 0);

    % Load existing settings
    if ispref('MultiModalChatGPT', 'Settings')
        settings = getpref('MultiModalChatGPT', 'Settings');
        % Merge with defaults
        fields = fieldnames(defaultSettings);
        for i = 1:length(fields)
            if ~isfield(settings, fields{i})
                settings.(fields{i}) = defaultSettings.(fields{i});
            end
        end
    else
        settings = defaultSettings;
    end

    % UI Elements Configuration
    elementY = 460; % Reduced from 680 to 460
    elementHeight = 25;
    sliderWidth = 400;
    labelWidth = 150;
    valueWidth = 60;

    % API Key
    uilabel(settingsFig, 'Text', 'API Key:',...
        'Position', [20 elementY labelWidth 22], 'FontWeight', 'bold');
    apiKeyField = uieditfield(settingsFig, 'text',...
        'Position', [180 elementY 400 elementHeight],...
        'Value', settings.apiKey);
    elementY = elementY - 40; % Reduced spacing

    % Model Selection
    uilabel(settingsFig, 'Text', 'Model:',...
        'Position', [20 elementY labelWidth 22], 'FontWeight', 'bold');
    modelDropdown = uidropdown(settingsFig,...
        'Position', [180 elementY 200 elementHeight],...
        'Items', {'First enter API key'}, 'Value', 'First enter API key');
    elementY = elementY - 40; % Reduced spacing

    % System Prompt
    uilabel(settingsFig, 'Text', 'System Prompt:',...
        'Position', [20 elementY labelWidth 22], 'FontWeight', 'bold');
    systemPromptField = uieditfield(settingsFig, 'text',...
        'Position', [180 elementY 400 elementHeight],...
        'Value', settings.systemPrompt);
    elementY = elementY - 40; % Reduced spacing

    % Temperature Control
    createSliderControl('Temperature (0-1):', settings.temperature, 0, 1);
    elementY = elementY - 45; % Reduced from -50
    
    % Max Tokens Control
    createSliderControl('Max Tokens:', settings.maxTokens, 1, 10000);
    elementY = elementY - 45;
    
    % Top-p Control
    createSliderControl('Top-p (0-1):', settings.topP, 0, 1);
    elementY = elementY - 45;
    
    % Frequency Penalty Control
    createSliderControl('Frequency Penalty (-2-2):', settings.frequencyPenalty, -2, 2);
    elementY = elementY - 45;
    
    % Presence Penalty Control
    createSliderControl('Presence Penalty (-2-2):', settings.presencePenalty, -2, 2);
    elementY = elementY - 45;

    % Save Button
    uibutton(settingsFig, 'push',...
        'Text', 'Save Settings',...
        'Position', [230 50 150 35],...
        'FontSize', 12, 'FontWeight', 'bold',...
        'BackgroundColor', [0.3 0.75 0.93],...
        'ButtonPushedFcn', @(src,event) saveSettings());

    % Help Button
    uibutton(settingsFig, 'push',...
        'Text', 'Help',...
        'Position', [20 50 40 20],...
        'FontSize', 12, 'FontWeight', 'bold',...
        'BackgroundColor', [0.8 0.8 0.8],...
        'ButtonPushedFcn', @(src,event) openHelpWindow());

    % Initialize model dropdown
    updateModelDropdown(settings.apiKey);
    apiKeyField.ValueChangedFcn = @(src,event) updateModelDropdown(src.Value);

    % Nested Functions
    function createSliderControl(labelText, initialValue, minVal, maxVal)
        uilabel(settingsFig, 'Text', labelText,...
            'Position', [20 elementY labelWidth 22], 'FontWeight', 'bold');
        
        % Value field under the label
        valueField = uieditfield(settingsFig, 'numeric',...
            'Position', [20 elementY-25 valueWidth elementHeight],...
            'Value', initialValue,...
            'Editable', 'off');
        
        % Slider positioned to the right of the label/value
        slider = uislider(settingsFig,...
            'Position', [180 elementY-0 sliderWidth 3],...
            'Limits', [minVal maxVal],...
            'Value', initialValue);
        
        slider.ValueChangedFcn = @(src,event) set(valueField, 'Value', src.Value);
        
        % Handle integer values for Max Tokens
        if strcmp(labelText, 'Max Tokens:')
            slider.ValueChangedFcn = @(src,event) set(valueField, 'Value', round(src.Value));
        end
        
        % Store control in settings structure
        switch labelText
            case 'Temperature (0-1):'
                settingsControls.tempSlider = slider;
            case 'Max Tokens:'
                settingsControls.maxTokensSlider = slider;
            case 'Top-p (0-1):'
                settingsControls.topPSlider = slider;
            case 'Frequency Penalty (-2-2):'
                settingsControls.freqPenSlider = slider;
            case 'Presence Penalty (-2-2):'
                settingsControls.presPenSlider = slider;
        end
    end

    function updateModelDropdown(apiKey)
        if isempty(apiKey)
            modelDropdown.Items = {'Enter API key first'};
            return
        end
        try
            options = weboptions('HeaderFields', {'Authorization', ['Bearer ' apiKey]}, 'Timeout', 300);
            models = webread('https://api.openai.com/v1/models', options);
            modelList = unique({models.data.id});
            modelDropdown.Items = modelList;
            if ismember(settings.model, modelList)
                modelDropdown.Value = settings.model;
            end
        catch
            modelDropdown.Items = {'Invalid API key or connection error'};
        end
    end

    function saveSettings()
        if isempty(apiKeyField.Value)
            uialert(settingsFig, 'API key is required!', 'Error', 'Icon','error');
            return;
        end
        
        newSettings = struct(...
            'apiKey', apiKeyField.Value,...
            'systemPrompt', systemPromptField.Value,...
            'model', modelDropdown.Value,...
            'temperature', settingsControls.tempSlider.Value,...
            'maxTokens', round(settingsControls.maxTokensSlider.Value),...
            'topP', settingsControls.topPSlider.Value,...
            'frequencyPenalty', settingsControls.freqPenSlider.Value,...
            'presencePenalty', settingsControls.presPenSlider.Value);
        
        setpref('MultiModalChatGPT', 'Settings', newSettings);
        uialert(settingsFig, 'Settings saved successfully!', 'Success', 'Icon','success');
        pause(1);
        close(settingsFig);
    end

end


function openHelpWindow()
    % Create Help Window
    helpFig = uifigure('Name', 'Help Guide', ...
        'Position', [200 300 700 600]);
    movegui(helpFig, 'center');

    % Create Scrollable Panel (no longer scrollable)
    scrollPanel = uipanel(helpFig, ...
        'Position', [0 0 700 600], ...
        'Scrollable', 'off'); % Disable scrolling for the panel

    % Build HTML content using sprintf for proper concatenation
    helpText = sprintf([...
    '<html><div style="font-family:Arial; padding:15px; line-height:1.6">',...
    '<h1 style="color:#2c3e50; border-bottom:2px solid #3498db">Understanding OpenAI LLM Settings</h1>',...
    '<p>When configuring the OpenAISettings() function, various parameters control how the language model responds. Let’s break down each setting and explain its effect.</p>',...
    '<hr>',...
    '<h2 style="color:#2980b9">1. API Key (apiKey)</h2>',...
    '<ul>',...
    '<li><b>Purpose:</b> This is your personal key that allows access to OpenAI’s API.</li>',...
    '<li><b>Effect:</b> Without a valid API key, you cannot use the model.</li>',...
    '<li><b>How to Get One:</b><br>',...
    'Go to OpenAI’s API platform and log in.<br>',...
    'Navigate to API Keys at <a href="https://platform.openai.com/api-keys">https://platform.openai.com/api-keys</a>.<br>',...
    'Click Create API Key and copy it.<br>',...
    'Paste it into the API Key field in the settings.</li>',...
    '</ul>',...
    '<hr>',...
    '<h2 style="color:#2980b9">2. System Prompt (systemPrompt)</h2>',...
    '<ul>',...
    '<li><b>Purpose:</b> Provides an initial instruction to the model that defines its behavior.</li>',...
    '<li><b>Example:</b> Default is <code>"You are a helpful assistant."</code></li>',...
    '<li><b>Effect:</b><br>',...
    'Setting it to <code>"You are a professional legal advisor."</code> makes responses more legal-focused.<br>',...
    '<code>"You are a creative storyteller."</code> makes responses more imaginative.</li>',...
    '</ul>',...
    '<hr>',...
    '<h2 style="color:#2980b9">3. Model (model)</h2>',...
    '<ul>',...
    '<li><b>Purpose:</b> Specifies which OpenAI model to use.</li>',...
    '<li><b>Options (subject to API availability):</b><br>',...
    '<code>"gpt-4o"</code> (default) – Most advanced, optimized for speed and efficiency.<br>',...
    '<code>"gpt-4"</code> – High-quality but slightly slower.<br>',...
    '<code>"gpt-3.5-turbo"</code> – More affordable, slightly less capable.</li>',...
    '<li><b>Effect:</b> Choosing a more powerful model improves response quality but may increase cost.</li>',...
    '</ul>',...
    '<hr>',...
    '<h2 style="color:#2980b9">4. Temperature (temperature)</h2>',...
    '<ul>',...
    '<li><b>Purpose:</b> Controls the randomness of responses.</li>',...
    '<li><b>Range:</b> <code>0.0</code> (strict, deterministic) → <code>1.0</code> (creative, varied).</li>',...
    '<li><b>Example Settings:</b><br>',...
    '<code>0.2</code>: Good for factual responses.<br>',...
    '<code>0.7</code>: Default, balanced between accuracy and creativity.<br>',...
    '<code>1.0</code>: More creative and unpredictable.</li>',...
    '<li><b>Effect:</b> Lower values make responses precise; higher values make them imaginative.</li>',...
    '</ul>',...
    '<hr>',...
    '<h2 style="color:#2980b9">5. Max Tokens (maxTokens)</h2>',...
    '<ul>',...
    '<li><b>Purpose:</b> Limits the response length.</li>',...
    '<li><b>Range:</b> <code>1 → 4096</code> (or higher, depending on the model).</li>',...
    '<li><b>Effect:</b><br>',...
    '<code>100</code>: Short responses, concise answers.<br>',...
    '<code>1000</code>: More detailed answers.</li>',...
    '<li><b>Tip:</b> A higher value increases cost and response time.</li>',...
    '</ul>',...
    '<hr>',...
    '<h2 style="color:#2980b9">6. Top-p (topP)</h2>',...
    '<ul>',...
    '<li><b>Purpose:</b> Controls response diversity using “nucleus sampling.”</li>',...
    '<li><b>Range:</b> <code>0.0</code> (focused) → <code>1.0</code> (full creativity).</li>',...
    '<li><b>Effect:</b><br>',...
    '<code>0.5</code>: Responses stay on topic.<br>',...
    '<code>1.0</code>: Full range of creative outputs.</li>',...
    '<li><b>Tip:</b> Adjust either Temperature or Top-p, not both.</li>',...
    '</ul>',...
    '<hr>',...
    '<h2 style="color:#2980b9">7. Frequency Penalty (frequencyPenalty)</h2>',...
    '<ul>',...
    '<li><b>Purpose:</b> Reduces repetition of words.</li>',...
    '<li><b>Range:</b> <code>-2.0</code> (more repetition) → <code>2.0</code> (less repetition).</li>',...
    '<li><b>Effect:</b><br>',...
    '<code>0</code>: No impact.<br>',...
    '<code>1.5</code>: Prevents excessive repetition.</li>',...
    '<li><b>Tip:</b> Useful for improving coherence.</li>',...
    '</ul>',...
    '<hr>',...
    '<h2 style="color:#2980b9">8. Presence Penalty (presencePenalty)</h2>',...
    '<ul>',...
    '<li><b>Purpose:</b> Encourages discussing new topics.</li>',...
    '<li><b>Range:</b> <code>-2.0</code> (stay on topic) → <code>2.0</code> (explore new ideas).</li>',...
    '<li><b>Effect:</b><br>',...
    '<code>0</code>: Neutral behavior.<br>',...
    '<code>1.5</code>: Encourages fresh content generation.</li>',...
    '<li><b>Tip:</b> Helps prevent AI from giving repetitive answers.</li>',...
    '</ul>',...
    '<hr>',...
    '<h2 style="color:#2980b9">Final Thoughts</h2>',...
    '<ul>',...
    '<li>For precise, fact-based answers: Use <code>temperature = 0.2</code>, <code>topP = 0.5</code>.</li>',...
    '<li>For creative writing: Use <code>temperature = 1.0</code>, <code>presencePenalty = 1.5</code>.</li>',...
    '<li>For long, detailed responses: Increase <code>maxTokens</code>.</li>',...
    '<li>To avoid repetition, adjust <code>frequencyPenalty</code>.</li>',...
    '</ul>',...
    '<p>This guide should help you fine-tune your OpenAI settings for the best experience! 😊</p>',...
    '<hr>',...
    '<p style="text-align:center">If you have any questions, feel free to reach out!<br>',...
    '<a href="https://rockbench.ir/">rockbench.ir</a></p>',...
    '</div></html>']);

    % Create HTML component with proper wrapping
    helpHtml = uihtml(scrollPanel, ...
        'Position', [10 10 680 580], ... % Adjusted height to fit within the panel
        'HTMLSource', helpText);

    % Add JavaScript to scroll to the top after loading
    helpHtml.HTMLSource = [helpText, ...
        '<script>window.scrollTo(0, 0);</script>'];
end